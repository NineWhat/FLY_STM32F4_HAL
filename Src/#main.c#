/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  * This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * Copyright (c) 2017 STMicroelectronics International N.V. 
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without 
  * modification, are permitted, provided that the following conditions are met:
  *
  * 1. Redistribution of source code must retain the above copyright notice, 
  *    this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright notice,
  *    this list of conditions and the following disclaimer in the documentation
  *    and/or other materials provided with the distribution.
  * 3. Neither the name of STMicroelectronics nor the names of other 
  *    contributors to this software may be used to endorse or promote products 
  *    derived from this software without specific written permission.
  * 4. This software, including modifications and/or derivative works of this 
  *    software, must execute solely and exclusively on microcontroller or
  *    microprocessor devices manufactured by or for STMicroelectronics.
  * 5. Redistribution and use of this software other than as permitted under 
  *    this license is void and will automatically terminate your rights under 
  *    this license. 
  *
  * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f4xx_hal.h"
#include "cmsis_os.h"

/* USER CODE BEGIN Includes */
#include "SBUS.h"
#include <string.h>
/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart1;

osThreadId Task_LEDHandle;
osThreadId Task_PWMHandle;
osThreadId Task_USARTHandle;

/* USER CODE BEGIN PV */
float _channels[16];
/* Private variables ---------------------------------------------------------*/

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
static void MX_USART1_UART_Init(void);
void Function_LED(void const * argument);
void Function_PWM(void const * argument);
void Function_USART(void const * argument);                                    
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  MX_USART1_UART_Init();

  /* USER CODE BEGIN 2 */
     HAL_TIM_PWM_Start  ( &htim2,  TIM_CHANNEL_1 );
		 HAL_TIM_PWM_Start  ( &htim2,  TIM_CHANNEL_2 );
		 HAL_TIM_PWM_Start  ( &htim2,  TIM_CHANNEL_3 );
		 HAL_TIM_PWM_Start  ( &htim2,  TIM_CHANNEL_4 );
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of Task_LED */
  osThreadDef(Task_LED, Function_LED, osPriorityNormal, 0, 128);
  Task_LEDHandle = osThreadCreate(osThread(Task_LED), NULL);

  /* definition and creation of Task_PWM */
  osThreadDef(Task_PWM, Function_PWM, osPriorityHigh, 0, 128);
  Task_PWMHandle = osThreadCreate(osThread(Task_PWM), NULL);

  /* definition and creation of Task_USART */
  osThreadDef(Task_USART, Function_USART, osPriorityHigh, 0, 128);
  Task_USARTHandle = osThreadCreate(osThread(Task_USART), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */

}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
}

/* TIM2 init function */
static void MX_TIM2_Init(void)
{

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 15;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 9999;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_TIM_MspPostInit(&htim2);

}

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 100000;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/** Configure pins as 
        * Analog 
        * Input 
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : KEY_USER_Pin */
  GPIO_InitStruct.Pin = KEY_USER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(KEY_USER_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/* Function_LED function */
void Function_LED(void const * argument)
{

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
		
    osDelay(1);
  }
  /* USER CODE END 5 */ 
}

/* Function_PWM function */
void Function_PWM(void const * argument)
{
  /* USER CODE BEGIN Function_PWM */
//	unsigned char count=0;
  /* Infinite loop */
  for(;;)
  {
		if(_channels[0]<500 && _channels[0]>0)
		{
			HAL_GPIO_WritePin(GPIOD, LED1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOD, LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
		}
		
		if(_channels[0]<1500 && _channels[0]>500)
		{
			HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
		}
		
		if(_channels[0]<2000 && _channels[0]>1500)
		{
			HAL_GPIO_WritePin(GPIOD, LED2_Pin|LED3_Pin|LED1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOD, LED4_Pin, GPIO_PIN_RESET);
		}
//		if(HAL_GPIO_ReadPin( GPIOA, KEY_USER_Pin )==1 ){ osDelay(500); count++; if(count>=4){count=0;}}

//		switch(count)
//		{
//			case 0 :
//		TIM2->CCR1=4000;
//		TIM2->CCR2=4000;
//		TIM2->CCR3=4000;
//		TIM2->CCR4=4000;
//			HAL_GPIO_WritePin(GPIOD, LED1_Pin, GPIO_PIN_SET);
//			HAL_GPIO_WritePin(GPIOD, LED2_Pin|LED4_Pin, GPIO_PIN_RESET);
//			break;
//			case 1 :
//		TIM2->CCR1=4000;
//		TIM2->CCR2=4000;
//		TIM2->CCR3=4000;
//		TIM2->CCR4=4000;
//			HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
//			HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
//			break;
//			case 2 :
//		TIM2->CCR1=6000;
//		TIM2->CCR2=6000;
//		TIM2->CCR3=6000;
//		TIM2->CCR4=6000;
//			HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
//			HAL_GPIO_WritePin(GPIOD, LED4_Pin, GPIO_PIN_RESET);
//			break;
//			case 3 :
//		TIM2->CCR1=8000;
//		TIM2->CCR2=8000;
//		TIM2->CCR3=8000;
//		TIM2->CCR4=8000;
//			HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_SET);
//			break;
//		}
    osDelay(1);
  }
  /* USER CODE END Function_PWM */
}

/* Function_USART function */
void Function_USART(void const * argument)
{
	         static uint8_t byteCNT = 0;

         static uint32_t lastTime = 0;

         uint32_t curTime;

         uint32_t interval = 0;
	
         int 	uart1_cache1[25] ;
	
	       int 	uart1_cache2[25] ;

     for(;;)   
{
         HAL_NVIC_ClearPendingIRQ(USART1_IRQn );

 

         if(lastTime == 0)

         {

                   curTime = HAL_GetTick();

                   lastTime = curTime;

         }

         else

         {

                  curTime = HAL_GetTick();

                   interval = curTime - lastTime;

                   lastTime = curTime;

                  

                   if(interval >= 3)

                   {

                            if(byteCNT == 25 && uart1_cache1[0] == 0x0f && uart1_cache1[24] == 0x00)

                            {

//                                     rc_captured = 0;

                                     memcpy(uart1_cache2, uart1_cache1, byteCNT);

//                                     rc_captured = 1;

                            }

                            byteCNT = 0;

                   }

         }

        

         if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_ORE))

         {

                   __HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_ORE);

                   uart1_cache1[byteCNT++] = huart1.Instance->DR;

         }

        

         if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE))

         {

                   uart1_cache1[byteCNT++] = huart1.Instance->DR;

         }

 
			 }
}
	
  /* USER CODE BEGIN Function_USART */
//  int inByte ;
//	uint8_t rxData[200];
//	uint8_t buffer_index = 0;
//	uint8_t ReceiveBuff[25];
//	uint32_t ERROR=0;
//	if(HAL_UART_Receive_IT(&huart1, (uint8_t *)rxData, 1) != HAL_OK)
//    {
//        Error_Handler();
//    }
//		for (uint8_t z = 0; z<15; z++) 
//				{
//		       _channels[z]      = 0;
//				}
//  /* Infinite loop */
//  for(;;)
//  { 
//		if(HAL_UART_Receive_IT(&huart1, (uint8_t *)rxData, 1) != HAL_OK)
//		inByte=rxData[0];
//		if (buffer_index == 0 && inByte != SBUS_STARTBYTE) {
//			//incorrect start byte, out of sync
////			continue;
//			 ERROR++;
//		}else{
//		ReceiveBuff[buffer_index++] = inByte;
//		}
//		if (buffer_index == 25) {
//			buffer_index = 0;
//			if (ReceiveBuff[24] != SBUS_ENDBYTE) {
//				//incorrect end byte, out of sync
////				continue;
//				ERROR++;
//			}else{
//		        _channels[0]  = ((ReceiveBuff[1]    |ReceiveBuff[2]<<8)                 & 0x07FF);
//			_channels[1]  = ((ReceiveBuff[2]>>3 |ReceiveBuff[3]<<5)                 & 0x07FF);
//			_channels[2]  = ((ReceiveBuff[3]>>6 |ReceiveBuff[4]<<2 |ReceiveBuff[5]<<10)  & 0x07FF);
//			_channels[3]  = ((ReceiveBuff[5]>>1 |ReceiveBuff[6]<<7)                 & 0x07FF);
//			_channels[4]  = ((ReceiveBuff[6]>>4 |ReceiveBuff[7]<<4)                 & 0x07FF);
//			_channels[5]  = ((ReceiveBuff[7]>>7 |ReceiveBuff[8]<<1 |ReceiveBuff[9]<<9)   & 0x07FF);
//			_channels[6]  = ((ReceiveBuff[9]>>2 |ReceiveBuff[10]<<6)                & 0x07FF);
//			_channels[7]  = ((ReceiveBuff[10]>>5|ReceiveBuff[11]<<3)                & 0x07FF);
//			_channels[8]  = ((ReceiveBuff[12]   |ReceiveBuff[13]<<8)                & 0x07FF);
//			_channels[9]  = ((ReceiveBuff[13]>>3|ReceiveBuff[14]<<5)                & 0x07FF);
//			_channels[10] = ((ReceiveBuff[14]>>6|ReceiveBuff[15]<<2|ReceiveBuff[16]<<10) & 0x07FF);
//			_channels[11] = ((ReceiveBuff[16]>>1|ReceiveBuff[17]<<7)                & 0x07FF);
//			_channels[12] = ((ReceiveBuff[17]>>4|ReceiveBuff[18]<<4)                & 0x07FF);
//			_channels[13] = ((ReceiveBuff[18]>>7|ReceiveBuff[19]<<1|ReceiveBuff[20]<<9)  & 0x07FF);
//			_channels[14] = ((ReceiveBuff[20]>>2|ReceiveBuff[21]<<6)                & 0x07FF);
//			_channels[15] = ((ReceiveBuff[21]>>5|ReceiveBuff[22]<<3)                & 0x07FF);
//		}
//	}
//		
		
		
		
		
//		if(rxData[buffer_index] == SBUS_STARTBYTE )
//		{
//			memcpy ( ReceiveBuff, rxData+buffer_index, sizeof(ReceiveBuff) );
//	
//		if (ReceiveBuff[24] == SBUS_ENDBYTE) 
//			{
//				for (uint8_t z = 0; z<15; z++) 
//				{
//		       _channels[z]      = 0;
//				}
//			_channels[0]  = ((ReceiveBuff[1]    |ReceiveBuff[2]<<8)                 & 0x07FF);
//			_channels[1]  = ((ReceiveBuff[2]>>3 |ReceiveBuff[3]<<5)                 & 0x07FF);
//			_channels[2]  = ((ReceiveBuff[3]>>6 |ReceiveBuff[4]<<2 |ReceiveBuff[5]<<10)  & 0x07FF);
//			_channels[3]  = ((ReceiveBuff[5]>>1 |ReceiveBuff[6]<<7)                 & 0x07FF);
//			_channels[4]  = ((ReceiveBuff[6]>>4 |ReceiveBuff[7]<<4)                 & 0x07FF);
//			_channels[5]  = ((ReceiveBuff[7]>>7 |ReceiveBuff[8]<<1 |ReceiveBuff[9]<<9)   & 0x07FF);
//			_channels[6]  = ((ReceiveBuff[9]>>2 |ReceiveBuff[10]<<6)                & 0x07FF);
//			_channels[7]  = ((ReceiveBuff[10]>>5|ReceiveBuff[11]<<3)                & 0x07FF);
//			_channels[8]  = ((ReceiveBuff[12]   |ReceiveBuff[13]<<8)                & 0x07FF);
//			_channels[9]  = ((ReceiveBuff[13]>>3|ReceiveBuff[14]<<5)                & 0x07FF);
//			_channels[10] = ((ReceiveBuff[14]>>6|ReceiveBuff[15]<<2|ReceiveBuff[16]<<10) & 0x07FF);
//			_channels[11] = ((ReceiveBuff[16]>>1|ReceiveBuff[17]<<7)                & 0x07FF);
//			_channels[12] = ((ReceiveBuff[17]>>4|ReceiveBuff[18]<<4)                & 0x07FF);
//			_channels[13] = ((ReceiveBuff[18]>>7|ReceiveBuff[19]<<1|ReceiveBuff[20]<<9)  & 0x07FF);
//			_channels[14] = ((ReceiveBuff[20]>>2|ReceiveBuff[21]<<6)                & 0x07FF);
//			_channels[15] = ((ReceiveBuff[21]>>5|ReceiveBuff[22]<<3)                & 0x07FF);
//			}
//		}
////		 HAL_UART_RxCpltCallback  ( &huart1 ) ;
//		HAL_UART_Receive_DMA(&huart1, (uint8_t *)rxData, sizeof(rxData)-1) ;

//    osDelay(1);
//		HAL_UART_Transmit_DMA(&huart1,(uint8_t *)_channels, 16) ;
//  }
  /* USER CODE END Function_USART */


/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM4 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
    HAL_IncTick();
  }
/* USER CODE BEGIN Callback 1 */

/* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
  /* USER CODE END Error_Handler_Debug */ 
}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
